/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package getcimidentities;

import ch.iec.tc57._2011.schema.message.ReplyType;
import ch.iec.tc57._2016.cimidentitiesqueriesmessage.CIMIdentitiesQueriesPayloadType;
import ch.iec.tc57._2016.querycimidentities.QueryCIMIdentitiesFaultMessage;
import com.epri._2016.cimidentities_.CIMIdentity;
import static java.lang.System.out;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.jws.WebService;

/**
 *
 * @author pdlo003
 */
@WebService(serviceName = "QueryCIMIdentities", portName = "QueryCIMIdentities_Port", endpointInterface = "ch.iec.tc57._2016.querycimidentities.QueryCIMIdentitiesPort", targetNamespace = "http://iec.ch/TC57/2016/QueryCIMIdentities", wsdlLocation = "WEB-INF/wsdl/GetCIMIdentities/CIMIdentities_Query_WSDL.wsdl")
public class GetCIMIdentities {
    String mRID;
    String NName;
    String NTName;
    String NTDes;
    String NTAName;
    String NTADes;
    String host = "jdbc:postgresql://localhost:5432/CIMIdentity";
    String uName = "postgres";
    String password = "epri97!!";
    public ch.iec.tc57._2016.cimidentitiesqueriesmessage.CIMIdentitiesQueriesResponseMessageType queryCIMIdentities
        (ch.iec.tc57._2016.cimidentitiesqueriesmessage.CIMIdentitiesQueriesRequestMessageType message) throws QueryCIMIdentitiesFaultMessage, SQLException {
        
        ch.iec.tc57._2016.cimidentitiesqueriesmessage.CIMIdentitiesQueriesResponseMessageType response = new ch.iec.tc57._2016.cimidentitiesqueriesmessage.CIMIdentitiesQueriesResponseMessageType();   
       
        ch.iec.tc57._2011.schema.message.HeaderType header = new ch.iec.tc57._2011.schema.message.HeaderType();
        header.setVerb("OK");
        header.setNoun("CIM Identities");
        
        //extract individual values for insertion into database
        //ArrayList<CIMIdentity> cim = (ArrayList<CIMIdentity>) response.getPayload().getCIMIdentities().getCIMIdentity();
        
        try {
            String query = "SELECT *" +
                          "FROM public.\"NameType\" as nt, public.\"Name\" as n, " +
                          "public.\"NameTypeAuthority\" as nta " +
                          "WHERE n.n_pkey = nt.nt_pkey AND " +
                          "nt.nt_pkey = nta.nta_pkey " +
                          "ORDER BY n.n_name ASC;";
           
           Connection conn = DriverManager.getConnection(host, uName, password);
           Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
           ResultSet rs = stmt.executeQuery(query);
           
           /*code for obtaining size of the result set if needed
           int size = 0;
           if (rs != null) {
               rs.beforeFirst();
               rs.last();
               size = rs.getRow();
           } */
           
           ch.iec.tc57._2016.cimidentitiesqueriesmessage.CIMIdentitiesQueriesPayloadType payload = new ch.iec.tc57._2016.cimidentitiesqueriesmessage.CIMIdentitiesQueriesPayloadType();
           ArrayList<CIMIdentity> cim = (ArrayList<CIMIdentity>) payload.getCIMIdentities().getCIMIdentity();
           int i = 0;
           
           while (rs.next()) {  
               //set the mRID
               com.epri._2016.cimidentities_.IdentifiedObject idObj = new com.epri._2016.cimidentities_.IdentifiedObject();
               idObj.setMRID(rs.getString("n_pkey"));
               cim.get(i).setIdentifiedObject(idObj);
               //cim.get(i).getIdentifiedObject().setMRID(rs.getString("n_pkey"));
               //set the Name
              // com.epri._2016.cimidentities_.Name Name = new com.epri._2016.cimidentities_.Name();
              // Name.setName(rs.getString("n_name"));
               //cim.get(i).getNames().get(0).
               
               cim.get(i).getNames().get(0).setName(rs.getString("n_name"));
               cim.get(i).getNames().get(0).getNameType().setName(rs.getString("nt_name"));
               cim.get(i).getNames().get(0).getNameType().setDescription(rs.getString("nt_description"));
               cim.get(i).getNames().get(0).getNameType().getNameTypeAuthority().setName(rs.getString("nta_name"));
               cim.get(i).getNames().get(0).getNameType().getNameTypeAuthority().setDescription(rs.getString("nta_description"));
               i++;
           }
           rs.close();
           stmt.close();
           conn.close();
           response.setPayload(payload);
           
        } catch(SQLException err){
                header.setVerb("FAILED");
                System.out.println(err.getMessage());
        }
        response.setHeader(header);
        return response;
        //throw new UnsupportedOperationException("Not implemented yet.");
    }
    
}
